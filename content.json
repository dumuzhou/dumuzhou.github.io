[{"title":"js事件及兼容写法","date":"2017-04-11T20:18:15.773Z","path":"2017/04/12/javascript-event/","text":"事件的操作分为注册、主动触发、取消 事件的三个阶段为捕获、目标、冒泡，低版本IE不支持捕获。 先看一下为什么要注册事件 1234567document.getElementsByTagName('html')[0].onclick = function() &#123; alert(\"html\");&#125;document.getElementsByTagName('html')[0].onclick = function() &#123; alert(\"html1\");&#125;// 当点击页面时只弹出了html1,如果我们需要html和html1都弹出就要用到事件注册了。 事件注册 1234567var addEvent = function(element, type, listener) &#123; if (element.addEventListener) &#123; element.addEventListener(type, listener, false); &#125; else &#123; // 兼容ie6-7-8 element.attachEvent('on' + type, listener); &#125;&#125; 事件触发 12345678910111213var fireEvent = function(element, event) &#123; if (element.dispatchEvent) &#123; var evt = document.createEvent('HTMLEvents'); // initEvent接受3个参数： // 事件类型，是否冒泡，是否阻止浏览器的默认行为 evt.initEvent(event, true, false); return !element.dispatchEvent(evt); &#125; else &#123; //兼容ie6-7-8 var evt = document.createEventObject(); // IE浏览器支持fireEvent方法 return element.fireEvent('on' + event, evt) &#125;&#125; 事件取消 1234567var removeEvent = function(element, type, listener) &#123; if (element.removeEventListener) &#123; element.removeEventListener(type, listener, false); &#125; else &#123; // 兼容ie6-7-8 element.detachEvent('on' + type, listener); &#125;&#125; 阻止冒泡 123456789101112document.getElementsByTagName('html')[0].onclick = function() &#123; alert(\"html\");&#125;document.getElementsByTagName('body')[0].onclick = function(e) &#123; alert(\"body\"); if (e &amp;&amp; e.stopPropagation) &#123; e.stopPropagation(); &#125; else &#123; window.event.cancelBubble = true; &#125;&#125;// 点击页面不会弹出html 阻止浏览器默认行为 123456789document.getElementsByTagName('a')[0].onclick = function(e) &#123; if (e &amp;&amp; e.preventDefault) &#123; e.preventDefault(); &#125; else &#123; window.event.returnValue = false; &#125; return false;&#125;// 这时点击页面上第一个a链接不会跳转 jquery中return false阻止冒泡和浏览器默认行为","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"event","slug":"event","permalink":"http://yoursite.com/tags/event/"}]},{"title":"javascript中的数据类型","date":"2017-04-11T20:18:15.773Z","path":"2017/04/12/javascript-type/","text":"基本数据类型 number,string,boolean,null,undefined 类型检测 12345typeof 1 // numbertypeof \"1\" // stringtypeof true // booleantypeof null // objecttypeof undefined // undefined 引用数据类型 Number,String,Boolean,Array,Date,Function,RegExp,Object… 引用数据类型检测 1234var o=&#123;a:1,b:2&#125;;o instanceof Object // true 判断是否是某个对象的实例\"a\" in o // true 判断对象是否含有某个属性o.constructor // 查看构造函数 判断所有数据类型的方法123function getType(obj)&#123; return (obj===undefined||obj===null)?obj:(obj.constructor&amp;&amp;obj.constructor.toString().match(/function\\s*([^(]*)/)[1]).toLowerCase();&#125;","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"javascript用正则表达式解析ulr值","date":"2017-04-11T20:18:15.773Z","path":"2017/04/12/javascript-url/","text":"1234567891011121314151617181920var url = 'http://dumuzhou.github.io/index.html?name=dy&amp;age=26#comment';var arr = url.match(/(https?:)\\/\\/([^\\/]+)(\\/[^\\?]*)?(\\?[^#]*)?(#.*)?/);var protocol = arr[1]; // 协议 var host = arr[2]; // 主机var pathname = arr[3]; // 路径var search = arr[4]; // 查询var hash = arr[5]; // 哈希值function getUrlHref(x)&#123; if(search)&#123; var str=search.replace(\"?\",\"\"); var oArr=str.split(\"&amp;\"); for(var a in oArr)&#123; var s=oArr[a].split(\"=\"); if(s[0]==x)&#123; return s[1]; &#125; &#125; &#125;&#125;console.log(getUrlHref(\"age\"));","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"RegExp","slug":"RegExp","permalink":"http://yoursite.com/tags/RegExp/"}]},{"title":"linux下svn、git服务器和本地目录文件同步","date":"2017-04-11T20:18:15.763Z","path":"2017/04/12/git-svn/","text":"windows下提交svn多方便，commit&gt;打钩&gt;Ok就可以了那么在linux下可不可以实现自动同步目录呢要实现同步本地目录无非是三个条件 删除本地不存在而服务器上存在的文件 添加新文件 提交 这里用bash脚本实现 1234567#!/bin/bash# 删除文件svn status | grep \"!\" | awk '&#123;print $2&#125;' | while read line;do svn delete $&#123;line&#125;;done;# 添加新文件svn status | grep \"?\" | awk '&#123;print $2&#125;' | while read line;do svn add $&#123;line&#125;;done;# 提交svn commit -m 'auto' 同理可得git 12345678#!/bin/bash# 删除文件git status -s | grep \"D\" | awk '&#123;print $2&#125;' | while read line;do git rm --cached $&#123;line&#125;;done;# 添加新文件git add .# 提交git commit -m 'auto'git push -u origin master","tags":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/tags/tools/"}]},{"title":"ubuntu搭建svn服务","date":"2017-04-11T20:18:15.763Z","path":"2017/04/12/hello-world/","text":"安装 1apt-get install -y subversion 创建目录 1mkdir /svn 创建一个新的空版本库 1svnadmin create /svn 创建用户和密码:vim /svn/conf/passwd 1234[users]# harry = harryssecret# sally = sallyssecretuser = admin 设置用户权限: vim /svn/conf/authz 123456# [/foo/bar]# harry = rw# &amp;joe = r# * =[/]user=rw 设置访问权限: vim /svn/conf/svnserve.conf 123456789101112131415161718anon-access = none # 改为 noneauth-access = write # 开启### The password-db option controls the location of the password### database file. Unless you specify a path starting with a /,### the file's location is relative to the directory containing### this configuration file.### If SASL is enabled (see below), this file will NOT be used.### Uncomment the line below to use the default password file.password-db = passwd # 开启### The authz-db option controls the location of the authorization### rules for path-based access control. Unless you specify a path### starting with a /, the file's location is relative to the### directory containing this file. The specified path may be a### repository relative URL (^/) or an absolute file:// URL to a text### file in a Subversion repository. If you don't specify an authz-db,### no path-based access control is done.### Uncomment the line below to use the default authorization file.authz-db = authz # 开启 启动 1svnserve -d -r /svn # 默认端口：3690 测试 1svn co svn://127.0.0.1 # 输入账号密码提示取出版本0说明成功搭建 停止 1killall svnserve 添加到开机启动: vim /etc/rc.local 12svnserve -d -r /svnexit 0","tags":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/tags/tools/"}]},{"title":"css3变形和动画","date":"2017-04-11T20:18:15.753Z","path":"2017/04/12/css3-animate/","text":"网页实现动画的几种方式 gif、flash、css3、js gif动画一般是用在图标或图片上，不能实现复杂的动画flash以前用的多，现在几乎不用了js用setInterval实现动画，可以兼容低版本的ie浏览器css3动画流畅，性能较好 css动画很多是配合变形来实现比较炫的效果，我们首先看一下transform这个属性 transform:rotate(30deg) // 旋转transform:translate(100%,50px) // 偏移transform:scale(1.2) // 缩放transform:skew(30deg) // 倾斜transform:matrix(a,b,c,d,e,f) // 矩阵// 还可以取值 scale3d scaleX scaleY scaleZ 以此类推transform-origin:center center; // 参考点 默认中心transform-style:flat/presever-3d // 扁平和3d效果perspective: 200px; // 透视距离perspective-origin: 0 0; // 透视角度 默认中心backface-visibility:visible/hidden; // 背景默认可见 transtion过渡动画 transition-property:none/left/all; // 哪个属性可以过渡transition-duration: 2s; // 过渡时间transition-timing-function:ease/linear/ease-in/ease-out/ease-in-out;// 过渡速度 两头慢 默认值/匀速/变快/变慢/两头慢 和第一个相比明显一些transiton-delay:2s; // 过渡等待时间transiton:all 2s linear 2s; // 简写 transition动画的有几下几个缺点 只能设置开始和结束连个关键帧 需要主动触发 hover或者添加class 不能设置动画次数 animation就是用来解决以上问题的 animation-name: main; // 动画别名animation-duration:2s; // 动画时间animation-timing-function:; // 动画速度 同transiton-timing-functionanimation-delay:2s; // 动画等待时间animation-iteration-count:1; // 动画次数 infinite 循环动画 默认一次animation-delay:normal/reverse/alternate/altername-reverse;// 动画方向/反方向/往返反向/反往返方向animation-fill-mode:none/backwords/forwords/both;// botn保留动画开始和结束的状态animate-paly-state:paused/running; // 暂停或开始动画animate:main 2s linear 2s; // 简写@keyframes main { // 定义main动画 0% {} 50% {} 100% {}} 看一下用animation实现的正圆运动 代码 1234567891011121314151617181920212223&lt;!DOTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; .demo &#123;width:300px;height:300px;border-radius:300px;margin:80px auto;border:1px solid #000;position:relative;&#125; .par &#123;width:300px;height:300px;animation:main 4s linear infinite both;position:absolute;top:0;left:0;&#125; .chi &#123;width:50px;height:50px;background:red;border-radius:50px;&#125; @keyframes main &#123; 0% &#123;transform:rotate(0deg);&#125; 100% &#123;transform:rotate(360deg);&#125; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"demo\"&gt; &lt;div class=\"par\"&gt; &lt;div class=\"chi\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 中间加个太阳，再加金木水火土星，有自传有公转，是不是就可以做个太阳系了。","tags":[{"name":"css3","slug":"css3","permalink":"http://yoursite.com/tags/css3/"}]},{"title":"css之flex弹性布局","date":"2017-04-11T20:18:15.753Z","path":"2017/04/12/css3-flex/","text":"弹性容器1display: flex; 弹性元素1父级为display: flex 且在文档流中的元素 1234567891011121314151617181920212223// 方向flex-direction: row / row-reverse / column / column-reverse // 左右（默认）/右左/上下/下上// 换行flex-wrap: nowrap / wrap / wrap-reverse // 不换行（默认）/换行/反向换行// 简写flex-flow: flex-direction flex-wrap;// 顺序order: 0 / 1 / 2; // 大的在后面// 分配剩余宽度的比例flex-grow: 0 / 1 / 2; // 默认0// 剩余空间为负数时分配比例flex-shrink: 1; // 默认平局分配flex-basis: 100px; // 初始宽/高// 简写flex: flex-grow flex-shrink flex-basis;// 对齐方式justify-content: flex-start / flex-end / center / space-between / space-around // 开始/结束/居中/间隔平分/两边参与平分// x/y轴对齐align-items: flex-start / flex-end / center / baseline /stretch // 顶部/底部/居中/基线/拉伸// 弹性元素对齐方式align-self: auto / flex-start / flex-end / center / baseline / stretch // 继承父级/顶部/底部/居中/基线/拉伸// 多行对齐方式align-content: flex-start / flex-end / center / space-between / space-around / stretch // 顶部/底部/居中/间隔平分/两边参与平分/拉伸","tags":[{"name":"flex","slug":"flex","permalink":"http://yoursite.com/tags/flex/"},{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]}]